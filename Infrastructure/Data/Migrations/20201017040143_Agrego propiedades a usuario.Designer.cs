// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201017040143_Agrego propiedades a usuario")]
    partial class Agregopropiedadesausuario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Core.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Telefono")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Core.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("CuentaId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("NUMBER(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("NUMBER(1)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CuentaId");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("NUMBER(1)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("RAW(2000)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("RAW(2000)");

                    b.Property<DateTime>("UltimoAcceso")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Username")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "angel@duoc.cl",
                            IsActive = false,
                            PasswordHash = new byte[] { 229, 165, 53, 177, 179, 225, 131, 230, 30, 212, 240, 25, 137, 72, 44, 118, 56, 98, 120, 142, 175, 44, 132, 108, 110, 76, 105, 119, 28, 98, 104, 180, 81, 57, 223, 205, 157, 190, 181, 172, 182, 127, 141, 236, 7, 206, 191, 232, 157, 77, 70, 38, 87, 156, 249, 69, 84, 107, 253, 56, 139, 34, 24, 204 },
                            PasswordSalt = new byte[] { 171, 192, 38, 254, 36, 17, 18, 194, 187, 130, 77, 92, 41, 244, 51, 84, 67, 85, 114, 183, 230, 136, 108, 78, 148, 116, 46, 205, 231, 120, 169, 167, 106, 249, 109, 117, 84, 176, 59, 205, 165, 65, 34, 221, 38, 214, 179, 222, 18, 125, 71, 0, 61, 151, 14, 204, 179, 44, 178, 255, 6, 183, 86, 28, 242, 81, 123, 28, 228, 243, 64, 150, 210, 190, 92, 86, 81, 19, 78, 117, 131, 9, 202, 175, 72, 141, 172, 167, 88, 0, 249, 240, 176, 168, 117, 163, 171, 105, 56, 223, 164, 139, 208, 1, 41, 112, 170, 71, 49, 137, 196, 204, 114, 27, 108, 138, 167, 88, 29, 251, 225, 141, 45, 136, 212, 221, 170, 226 },
                            UltimoAcceso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "Angel"
                        },
                        new
                        {
                            Id = 2,
                            Email = "profe.moises@duoc.cl",
                            IsActive = false,
                            PasswordHash = new byte[] { 229, 165, 53, 177, 179, 225, 131, 230, 30, 212, 240, 25, 137, 72, 44, 118, 56, 98, 120, 142, 175, 44, 132, 108, 110, 76, 105, 119, 28, 98, 104, 180, 81, 57, 223, 205, 157, 190, 181, 172, 182, 127, 141, 236, 7, 206, 191, 232, 157, 77, 70, 38, 87, 156, 249, 69, 84, 107, 253, 56, 139, 34, 24, 204 },
                            PasswordSalt = new byte[] { 171, 192, 38, 254, 36, 17, 18, 194, 187, 130, 77, 92, 41, 244, 51, 84, 67, 85, 114, 183, 230, 136, 108, 78, 148, 116, 46, 205, 231, 120, 169, 167, 106, 249, 109, 117, 84, 176, 59, 205, 165, 65, 34, 221, 38, 214, 179, 222, 18, 125, 71, 0, 61, 151, 14, 204, 179, 44, 178, 255, 6, 183, 86, 28, 242, 81, 123, 28, 228, 243, 64, 150, 210, 190, 92, 86, 81, 19, 78, 117, 131, 9, 202, 175, 72, 141, 172, 167, 88, 0, 249, 240, 176, 168, 117, 163, 171, 105, 56, 223, 164, 139, 208, 1, 41, 112, 170, 71, 49, 137, 196, 204, 114, 27, 108, 138, 167, 88, 29, 251, 225, 141, 45, 136, 212, 221, 170, 226 },
                            UltimoAcceso = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Username = "ProfeMoises"
                        });
                });

            modelBuilder.Entity("Core.Cuenta", b =>
                {
                    b.HasOne("Core.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("Core.Cuenta", null)
                        .WithMany("Cuentas")
                        .HasForeignKey("CuentaId");
                });
#pragma warning restore 612, 618
        }
    }
}
