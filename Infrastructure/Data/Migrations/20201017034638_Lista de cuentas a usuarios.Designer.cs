// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

namespace Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20201017034638_Lista de cuentas a usuarios")]
    partial class Listadecuentasausuarios
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            modelBuilder.Entity("Core.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Rut")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Telefono")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("Core.Cuenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ClienteId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int?>("CuentaId")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("FechaApertura")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("IdCliente")
                        .HasColumnType("NUMBER(10)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("NUMBER(1)");

                    b.Property<decimal>("Saldo")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<decimal>("SaldoInicial")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<int>("TipoCuenta")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("CuentaId");

                    b.ToTable("Cuentas");
                });

            modelBuilder.Entity("Core.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)")
                        .HasAnnotation("Oracle:ValueGenerationStrategy", OracleValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("RAW(2000)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("RAW(2000)");

                    b.Property<string>("Username")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("Id");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PasswordHash = new byte[] { 188, 105, 74, 77, 217, 42, 14, 81, 71, 155, 9, 127, 35, 119, 242, 77, 195, 238, 129, 51, 35, 51, 184, 200, 144, 4, 129, 157, 17, 131, 172, 116, 23, 154, 83, 95, 94, 40, 254, 129, 215, 219, 64, 103, 4, 215, 63, 109, 184, 103, 31, 26, 15, 216, 225, 191, 46, 252, 210, 246, 255, 195, 226, 153 },
                            PasswordSalt = new byte[] { 76, 133, 21, 149, 178, 190, 218, 180, 227, 103, 71, 27, 200, 210, 37, 61, 87, 144, 21, 216, 224, 199, 238, 248, 202, 159, 146, 220, 159, 80, 136, 165, 123, 180, 43, 62, 156, 45, 127, 92, 56, 179, 143, 118, 215, 133, 228, 10, 85, 120, 200, 213, 25, 237, 164, 170, 198, 70, 164, 202, 245, 127, 22, 109, 211, 148, 211, 215, 143, 220, 241, 249, 101, 143, 207, 147, 131, 226, 71, 190, 151, 93, 31, 172, 90, 244, 240, 140, 233, 151, 92, 128, 95, 156, 139, 205, 192, 181, 142, 168, 224, 40, 245, 192, 67, 61, 60, 245, 195, 119, 178, 160, 190, 65, 31, 174, 143, 42, 166, 60, 249, 203, 30, 122, 77, 103, 49, 43 },
                            Username = "Angel"
                        },
                        new
                        {
                            Id = 2,
                            PasswordHash = new byte[] { 188, 105, 74, 77, 217, 42, 14, 81, 71, 155, 9, 127, 35, 119, 242, 77, 195, 238, 129, 51, 35, 51, 184, 200, 144, 4, 129, 157, 17, 131, 172, 116, 23, 154, 83, 95, 94, 40, 254, 129, 215, 219, 64, 103, 4, 215, 63, 109, 184, 103, 31, 26, 15, 216, 225, 191, 46, 252, 210, 246, 255, 195, 226, 153 },
                            PasswordSalt = new byte[] { 76, 133, 21, 149, 178, 190, 218, 180, 227, 103, 71, 27, 200, 210, 37, 61, 87, 144, 21, 216, 224, 199, 238, 248, 202, 159, 146, 220, 159, 80, 136, 165, 123, 180, 43, 62, 156, 45, 127, 92, 56, 179, 143, 118, 215, 133, 228, 10, 85, 120, 200, 213, 25, 237, 164, 170, 198, 70, 164, 202, 245, 127, 22, 109, 211, 148, 211, 215, 143, 220, 241, 249, 101, 143, 207, 147, 131, 226, 71, 190, 151, 93, 31, 172, 90, 244, 240, 140, 233, 151, 92, 128, 95, 156, 139, 205, 192, 181, 142, 168, 224, 40, 245, 192, 67, 61, 60, 245, 195, 119, 178, 160, 190, 65, 31, 174, 143, 42, 166, 60, 249, 203, 30, 122, 77, 103, 49, 43 },
                            Username = "ProfeMoises"
                        });
                });

            modelBuilder.Entity("Core.Cuenta", b =>
                {
                    b.HasOne("Core.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId");

                    b.HasOne("Core.Cuenta", null)
                        .WithMany("Cuentas")
                        .HasForeignKey("CuentaId");
                });
#pragma warning restore 612, 618
        }
    }
}
